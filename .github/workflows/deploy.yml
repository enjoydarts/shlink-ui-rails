# .github/workflows/deploy.yml
# 本番環境への自動デプロイワークフロー
#
# 動作条件:
# - mainブランチへのpush/merge時に実行
# - DockerイメージをGitHub Container Registryにビルド・プッシュ
# - OCIインスタンスにSSH接続してデプロイ実行
# - ヘルスチェック・ロールバック機能付き

name: Production Deployment

# ワークフロー実行条件
on:
  push:
    branches: [main]
  workflow_dispatch:  # 手動実行を許可
    inputs:
      skip_tests:
        description: 'Skip test execution (emergency deploy)'
        required: false
        default: false
        type: boolean

# 環境変数設定
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# ジョブ定義
jobs:
  # 事前チェックジョブ
  pre-checks:
    name: Pre-deployment checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      skip_tests: ${{ steps.check.outputs.skip_tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check deployment conditions
        id: check
        run: |
          # コミットメッセージに[skip deploy]が含まれている場合はスキップ
          if git log -1 --pretty=%B | grep -q "\[skip deploy\]"; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "🚫 Deployment skipped due to [skip deploy] in commit message"
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment will proceed"
          fi

          # 手動実行時のテストスキップ設定
          if [[ "${{ github.event.inputs.skip_tests }}" == "true" ]]; then
            echo "skip_tests=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tests will be skipped (emergency deploy)"
          else
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          fi

  # テスト実行ジョブ
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should_deploy == 'true' && needs.pre-checks.outputs.skip_tests == 'false'

    # サービスコンテナ設定（テスト用MySQL, Redis）
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: shlink_ui_rails_test
          MYSQL_USER: app
          MYSQL_PASSWORD: apppass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: true

      - name: Set up database
        env:
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
          DATABASE_NAME: shlink_ui_rails_test
          DATABASE_USER: app
          DATABASE_PASSWORD: apppass
          DATABASE_URL: mysql2://app:apppass@127.0.0.1:3306/shlink_ui_rails_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          bin/rails db:create
          bundle exec ridgepole --config config/database.yml --env test --file db/schemas/Schemafile --apply

      - name: Precompile assets
        run: bundle exec rails assets:precompile

      - name: Run RuboCop
        run: bundle exec rubocop

      - name: Run RSpec
        env:
          RAILS_ENV: test
          DATABASE_URL: mysql2://app:apppass@127.0.0.1:3306/shlink_ui_rails_test
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rspec

  # Dockerイメージビルド・プッシュジョブ
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [pre-checks, test]
    if: needs.pre-checks.outputs.should_deploy == 'true' && (needs.test.result == 'success' || needs.pre-checks.outputs.skip_tests == 'true')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/arm64  # OCI Ampere A1用
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  # 本番デプロイジョブ
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-checks, build-and-push]
    if: needs.pre-checks.outputs.should_deploy == 'true'

    environment:
      name: production
      url: https://app.kty.at

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -euo pipefail

          # 設定
          DEPLOY_TIMEOUT=600  # 10分
          HEALTH_CHECK_TIMEOUT=300  # 5分
          BACKUP_RETENTION_DAYS=7
          LOG_FILE="/opt/shlink-ui-rails/logs/deploy.log"

          # ログ関数
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" | tee -a "$LOG_FILE"
          }

          # エラーハンドリング
          trap 'log "❌ Deployment failed at line $LINENO"; exit 1' ERR

          log "🚀 Starting deployment process..."

          # アプリケーションディレクトリに移動
          cd /opt/shlink-ui-rails

          # 環境変数ファイルが存在することを確認
          if [ ! -f .env.production ]; then
            log "❌ ERROR: .env.production file not found!"
            exit 1
          fi

          # GitHub Container Registryにログイン
          log "🔑 Logging into container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # 現在のコンテナをバックアップ
          log "💾 Creating backup of current containers..."
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          if docker-compose -f docker-compose.prod.yml ps -q app >/dev/null 2>&1; then
            RUNNING_CONTAINER=$(docker-compose -f docker-compose.prod.yml ps -q app)
            if [[ -n "$RUNNING_CONTAINER" ]]; then
              docker commit "$RUNNING_CONTAINER" "ghcr.io/${{ github.repository }}:$BACKUP_TAG" || log "⚠️  Backup creation failed"
            fi
          fi

          # 最新のDockerイメージを強制プル
          log "🐳 Pulling new Docker image: ${{ needs.build-and-push.outputs.image }}"
          docker pull ${{ needs.build-and-push.outputs.image }}
          docker tag ${{ needs.build-and-push.outputs.image }} ghcr.io/${{ github.repository }}:latest

          # データベーススキーマの適用（Ridgepole）
          log "🗄️  Applying database schema with Ridgepole..."
          docker-compose -f docker-compose.prod.yml run --rm app bundle exec ridgepole --config config/database.yml --env production --file db/schemas/Schemafile --apply

          # システム設定の初期化
          log "⚙️  Initializing system settings..."
          docker-compose -f docker-compose.prod.yml run --rm app bundle exec rails runner "SystemSetting.initialize_defaults!"

          # サービス再起動
          log "🔄 Restarting services with zero-downtime strategy..."
          docker-compose -f docker-compose.prod.yml up -d --force-recreate

          # ヘルスチェック待機
          log "🏥 Waiting for application to be healthy..."
          timeout $HEALTH_CHECK_TIMEOUT bash -c '
            while ! curl -sf http://localhost:3000/health >/dev/null 2>&1; do
              echo "⏳ Waiting for health check..."
              sleep 10
            done
          ' || {
            log "❌ Health check timeout! Rolling back..."
            # ロールバック処理
            if [[ -n "${BACKUP_TAG:-}" ]] && docker image inspect "ghcr.io/${{ github.repository }}:$BACKUP_TAG" >/dev/null 2>&1; then
              log "🔄 Rolling back to previous version..."
              docker tag "ghcr.io/${{ github.repository }}:$BACKUP_TAG" "ghcr.io/${{ github.repository }}:latest"
              docker-compose -f docker-compose.prod.yml up -d --force-recreate
              sleep 30
              if curl -sf http://localhost:3000/health >/dev/null 2>&1; then
                log "✅ Rollback successful"
              else
                log "❌ Rollback also failed!"
              fi
            fi
            exit 1
          }

          log "✅ Application is healthy!"

          # 古いバックアップとイメージをクリーンアップ
          log "🧹 Cleaning up old backups and images..."
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
            grep "backup-" | \
            awk -v date="$(date -d "$BACKUP_RETENTION_DAYS days ago" +%Y-%m-%d)" '$2 < date {print $1}' | \
            xargs -r docker rmi || true

          docker system prune -f --filter "until=24h"

          # デプロイ成功ログ
          log "🎉 Deployment completed successfully!"
          log "📊 Image: ${{ needs.build-and-push.outputs.image }}"
          log "🔗 Digest: ${{ needs.build-and-push.outputs.digest }}"
          echo "$(date): Deployment completed successfully - $(git -C app rev-parse --short HEAD)" >> deploy.log

          DEPLOY_SCRIPT

          chmod +x deploy.sh

      - name: Deploy to OCI
        env:
          IMAGE: ${{ needs.build-and-push.outputs.image }}
          DIGEST: ${{ needs.build-and-push.outputs.digest }}
        run: |
          scp -i ~/.ssh/id_ed25519 deploy.sh ${{ secrets.OCI_USERNAME }}@${{ secrets.OCI_HOST }}:/tmp/
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.OCI_USERNAME }}@${{ secrets.OCI_HOST }} 'bash /tmp/deploy.sh && rm /tmp/deploy.sh'

      - name: Verify External Access
        run: |
          echo "🔍 Verifying external access..."
          timeout 300 bash -c '
            while ! curl -sf https://app.kty.at/health >/dev/null 2>&1; do
              echo "⏳ Waiting for external access... ($(date))"
              sleep 15
            done
          '
          echo "✅ External access verified!"

      - name: Post-deployment checks
        run: |
          echo "🔍 Running post-deployment checks..."

          # 基本ヘルスチェック
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://app.kty.at/health)
          if [[ "$HEALTH_STATUS" == "200" ]]; then
            echo "✅ Health check passed (HTTP $HEALTH_STATUS)"
          else
            echo "❌ Health check failed: HTTP $HEALTH_STATUS"
            exit 1
          fi

          # SSL証明書チェック
          SSL_EXPIRE=$(echo | openssl s_client -connect app.kty.at:443 -servername app.kty.at 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
          echo "🔐 SSL certificate expires: $SSL_EXPIRE"

          # セキュリティヘッダーチェック
          echo "🛡️  Security headers:"
          SECURITY_HEADERS=$(curl -sI https://app.kty.at/ | grep -E "(Strict-Transport-Security|X-Content-Type-Options|X-Frame-Options)" || echo "No security headers found")
          echo "$SECURITY_HEADERS"

          echo "🎊 All post-deployment checks passed!"

  # デプロイ状況通知ジョブ
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-checks, test, build-and-push, deploy]
    if: always() && needs.pre-checks.outputs.should_deploy == 'true'

    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌐 Application URL: https://app.kty.at"
          echo "📊 Deployment time: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"
          # Slack/Discord通知が必要な場合はここに追加

      - name: Notify Failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Failed jobs:"
          echo "  - Test: ${{ needs.test.result }}"
          echo "  - Build: ${{ needs.build-and-push.result }}"
          echo "  - Deploy: ${{ needs.deploy.result }}"
          echo "📋 Check the workflow logs for details"
          echo "🏥 Health check URL: https://app.kty.at/health"
          # 緊急アラートが必要な場合はここに追加

      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Result:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://app.kty.at" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date)" >> $GITHUB_STEP_SUMMARY